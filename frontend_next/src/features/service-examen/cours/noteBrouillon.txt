import { useEffect, useState } from "react";
import UEService from "@/services/ueService";
import EvaluationService from "@/services/evaluationsService";
import NoteService from "@/services/noteService";

function ListeEtudiantsUE({ ueId }) {
  const [etudiants, setEtudiants] = useState([]);
  const [evaluations, setEvaluations] = useState([]);
  const [selectedEvaluation, setSelectedEvaluation] = useState(""); // valeur choisie
  const [editIndex, setEditIndex] = useState(null); // index de l'étudiant en cours d'édition const [editIndex, setEditIndex] = useState(null); // <-- ajoute ça
  const [editedData, setEditedData] = useState({
    note_devoir: "",
    note_projet: "",
    note_examen: "",
  });
  const [selectedRow, setSelectedRow] = useState(null); // index de la ligne sélectionnée
  const etudiantSelectionne = selectedRow !== null ? etudiants[selectedRow] : null;

  // Gérer le clic sur une cellule pour éditer
  const handleEdit = (index, etudiant) => {
    setEditIndex(index); // active le champ édition
    setEditedData({
      note_devoir: etudiant.note_devoir ?? "",
      note_examen: etudiant.note_examen ?? "",
    });
  };
 
  // Recuperation des etudiants inscrits à l'UE
  useEffect(() => {
    const fetchEtudiants = async () => {
      console.log(">>> ueId reçu dans ListeEtudiantsUE:", ueId);
      const data = await UEService.getEtudiantsByUE(ueId);
      setEtudiants(data);
      console.log("Étudiants récupérés:", data);
    };
     if (ueId) {   
    fetchEtudiants();
  }
  }, [ueId]);

// Récupérer les évaluations pour la UE donnée
  useEffect(() => {
    const fetchEvaluations = async () => {
      const data = await EvaluationService.getEvaluationsByUE(ueId);
      setEvaluations(data);
      console.log("Evaluations récupérés:", data);
    };
     if (ueId) {   
    fetchEvaluations();
  }
  }, [ueId]);

// Sauvegarder la note (création)
const handleSave = async (currentIndex) => {
  if (!etudiantSelectionne) return;

  const etudiantId = etudiantSelectionne.id;
  const evaluationId = localStorage.getItem("evaluationId");
  const evaluation = selectedEvaluation;
  const noteValue = evaluation.type === "Devoir" ? editedData.note_devoir : editedData.note_examen;

  if (!evaluationId) {
    alert("Veuillez sélectionner une évaluation.");
    return;
  }

  if (noteValue < 0 || noteValue > 20 || isNaN(noteValue)) {
    alert("Veuillez entrer une note valide entre 0 et 20.");
    return;
  }

  try {
    const res = await NoteService.createNote(etudiantId, evaluationId, parseFloat(noteValue));
    console.log("Note créée :", res);

    // Mise à jour du tableau
    setEtudiants((prev) =>
      prev.map((et, idx) =>
        idx === currentIndex
          ? {
              ...et,
              note_devoir: evaluation.type === "Devoir" ? parseFloat(noteValue) : et.note_devoir,
              note_examen: evaluation.type === "Examen" ? parseFloat(noteValue) : et.note_examen,
            }
          : et
      )
    );
    // Mettre aussi à jour editedData pour que l'input garde la valeur
        setEditedData((prev) => ({
          ...prev,
          note_devoir: evaluation.type === "Devoir" ? parseFloat(noteValue) : prev.note_devoir,
          note_examen: evaluation.type === "Examen" ? parseFloat(noteValue) : prev.note_examen,
        }));

    // Vérifier si dernière ligne
    const nextIndex = currentIndex + 1;
    if (nextIndex < etudiants.length) {
      handleEdit(nextIndex, etudiants[nextIndex]);
    } else {
      setSelectedRow(null);
      console.log("Fin de la saisie des notes");
      alert("Fin de la saisie des notes.");
    }
  } catch (err) {
    console.error("Erreur lors de la création :", err);
  }
};

// Gérer la touche "Enter" pour sauvegarder
  const handleKeyDown = async (e, currentIndex) => {
    if (e.key === "Enter") {
      await handleSave(currentIndex);
  };
  };


  return (
    <div>
      <h1>Étudiants inscrits</h1>
      <div className="border p-4 mt-10">
         <div>
              <span className="text-black font-bold text-sm ml-5">
                Type d'évaluation: &nbsp;&nbsp;
              </span>
            
              <select
                value={selectedEvaluation}
                 onChange={(e) => {
                        const selectedType = e.target.value;
                        setSelectedEvaluation(selectedType);
                        // Récupérer l'objet evaluation correspondant
                        const evaluationObj = evaluations.find(ev => ev.type === selectedType);
                        if (evaluationObj) {
                          setSelectedEvaluation(evaluationObj);
                          localStorage.setItem("evaluationId", evaluationObj.id);
                          console.log("Evaluation ID stocké:", evaluationObj.id);
                        }
                      }}
                className="px-1 py-1/4 rounded border-none bg-blue-500 focus:outline-none text-sm text-white ml-1"
              >
                {/* Option par défaut */}
                <option value="" disabled className="text-black">
                 Type d'évaluation 
                </option>

                {/* Options venant du backend */}
                {evaluations.map((evaluation, index) => (
                  <option key={index} value={evaluation.type} className="text-black">
                    {evaluation.type}
                  </option>
                ))}
              </select>
              
              <span className="text-black font-bold text-sm ml-25">
                Poids d'évaluation: &nbsp;&nbsp;
              </span>
              <input
                type="number"
                 min="0"
                max="100"
                step="10"
                value={selectedEvaluation?.poids || ""}
                onChange={(e) => setSelectedEvaluation({ ...selectedEvaluation, poids: e.target.value })}
                className="px-1 py-1/4 rounded border-none bg-blue-500 focus:outline-none text-sm text-white ml-1"
              />
            </div>
            <table className="w-full text-left border-collapse mt-15">
              <thead>
                <tr className="bg-gray-100">
                  <th className="px-4 py-2 text-sm text-center">N° Carte</th>
                  <th className="px-4 py-2 text-sm text-center">Nom</th>
                  <th className="px-4 py-2 text-sm text-center">Prénoms</th>
                  <th className="px-4 py-2 text-sm text-center">Sexe</th>
                    {selectedEvaluation?.type === "Devoir" && (
                    <th className="px-4 py-2 text-sm text-center">Devoir</th>
                  )}
                  {selectedEvaluation?.type === "Examen" && (
                    <>
                      <th className="px-4 py-2 text-sm text-center">Devoir</th>
                      <th className="px-4 py-2 text-sm text-center">Examen</th>
                      <th className="px-4 py-2 text-sm text-center">Moyenne</th>
                    </>
                  )}
                </tr>
              </thead>
              <tbody>
                {etudiants.map((etudiant, index) => (
                  <tr
                    key={`${etudiant.numero_carte}-${index}`}
                      className={`${index % 2 === 0 ? "bg-white" : "bg-gray-100"} ${selectedRow === index ? "bg-gray-200" : ""}`}
                      onClick={() => {
                        setSelectedRow(index); // sélectionne la ligne
                        setEditedData({
                          note_devoir: etudiant.note_devoir,
                          note_examen: etudiant.note_examen
                        });
                      }}
                  >
                    <td className="px-4 py-2 text-center">
                      {etudiant.num_carte}
                    </td>
                    <td className="px-4 py-2 text-center">{etudiant.utilisateur.last_name.toUpperCase()}</td>
                    <td className="px-4 py-2 text-center">{etudiant.utilisateur.first_name}</td>
                    <td className="px-4 py-2 text-center">{etudiant.utilisateur.sexe}</td>

                      {selectedEvaluation?.type === "Devoir" && (
                        <td
                          className="px-4 py-2 text-center cursor-pointer"
                          onClick={() => handleEdit(index, etudiant)}
                        >
                          {editIndex === index ? (
                            <input
                              id="devoir-input"
                              type="number"
                              value={editedData.note_devoir ?? ""}
                              onChange={(e) => {
                                console.log("Valeur saisie :", e.target.value);
                                setEditedData({
                                  ...editedData,
                                  note_devoir: e.target.value,
                                });
                              }}
                              disabled={selectedEvaluation?.type !== "Devoir"}
                              onKeyDown={(e) => handleKeyDown(e, index)}
                              autoFocus
                              className="w-16 text-center border rounded bg-gray-100 disabled:opacity-50"
                            />
                          ) : (
                            etudiant.note_devoir
                          )}
                        </td>
                      )}
                   {selectedEvaluation?.type === "Examen" && (
                      <>
                        {/* Devoir - lecture seule */}
                        <td className="px-4 py-2 text-center">
                          {etudiant.note_devoir ?? "-"}
                        </td>

                        {/* Examen - modifiable */}
                        <td
                          className="px-4 py-2 text-center cursor-pointer"
                          onClick={() => handleEdit(index, etudiant)}
                        >
                          {editIndex === index ? (
                            <input
                              id="examen-input"
                              type="number"
                              value={editedData.note_examen ?? ""}
                              onChange={(e) =>
                                setEditedData({
                                  ...editedData,
                                  note_examen: e.target.value,
                                })
                              }
                              onKeyDown={(e) => handleKeyDown(e, index)}
                              autoFocus
                              className="w-16 text-center border rounded bg-gray-100"
                            />
                          ) : (
                            etudiant.note_examen
                          )}
                        </td>
                        {/* Moyenne - lecture seule */}
                        <td className="px-4 py-2 text-center">
                          {etudiant.note_devoir && etudiant.note_examen
                            ? ((parseFloat(etudiant.note_devoir) + parseFloat(etudiant.note_examen)) / 2).toFixed(2)
                            : "-"}
                        </td>
                      </>
                    )}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
    </div>
  );
}
export default ListeEtudiantsUE;














import { useEffect, useState } from "react";
import EtudiantService from "@/services/etudiantService";
function ListeEtudiantsUE({ ueId }) {
  const [etudiants, setEtudiants] = useState([]);
  const [evaluations, setEvaluations] = useState([]);
  const [loading, setLoading] = useState(true);

  // Récupérer les étudiants + notes + évaluations
  useEffect(() => {
    const fetchData = async () => {
      if (!ueId) return;

      try {
        const res = await EtudiantService.getEtudiantsNotesByUE(ueId); // API : /api/notes/ues/<id>/notes/
        setEtudiants(res.etudiants);
        setEvaluations(res.evaluations);
      } catch (err) {
        console.error("Erreur récupération notes :", err);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [ueId]);

  if (loading) return <p>Chargement...</p>;

  return (
    <div>
      <h2>Étudiants inscrits</h2>
      <table className="w-full border-collapse border">
        <thead>
          <tr className="bg-gray-100">
            <th className="border px-2 py-1">N° Carte</th>
            <th className="border px-2 py-1">Nom</th>
            <th className="border px-2 py-1">Prénom</th>
            <th className="border px-2 py-1">Sexe</th>
            {evaluations.map((eval_) => (
              <th key={eval_.id} className="border px-2 py-1 text-center">
                {eval_.type} ({eval_.poids}%)
              </th>
            ))}
          </tr>
        </thead>
        <tbody>
          {etudiants.map((etu) => (
            <tr key={etu.id} className="even:bg-gray-50">
              <td className="border px-2 py-1 text-center">{etu.num_carte}</td>
              <td className="border px-2 py-1">{etu.nom}</td>
              <td className="border px-2 py-1">{etu.prenom}</td>
              <td className="border px-2 py-1 text-center">{etu.sexe}</td>
              {evaluations.map((eval_) => {
                const note = etu.notes[eval_.id]; // note récupérée côté backend
                return (
                  <td key={eval_.id} className="border px-2 py-1 text-center">
                    {note ?? "-"}
                  </td>
                );
              })}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default ListeEtudiantsUE;













import { useEffect, useState } from "react";
import NoteService from "@/services/noteService";
import EtudiantService from "@/services/etudiantService";

function ListeEtudiantsUE({ ueId }) {
  const [etudiants, setEtudiants] = useState([]);
  const [evaluations, setEvaluations] = useState([]);
  const [selectedEvaluation, setSelectedEvaluation] = useState(null); // type choisi
  const [loading, setLoading] = useState(true);
  const [editIndex, setEditIndex] = useState(null);
  const [editedData, setEditedData] = useState({});

  useEffect(() => {
    const fetchData = async () => {
      if (!ueId) return;
      try {
        const res = await EtudiantService.getNotesByUE(ueId);
        setEtudiants(res.etudiants);
        setEvaluations(res.evaluations);
      } catch (err) {
        console.error("Erreur récupération notes :", err);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, [ueId]);

  const handleEdit = (index, etu) => {
    setEditIndex(index);
    setEditedData({ note: etu.notes[selectedEvaluation.id] ?? "" });
  };

  const handleSave = async (index, etu) => {
    if (!selectedEvaluation) return;
    const noteValue = parseFloat(editedData.note);
    if (isNaN(noteValue) || noteValue < 0 || noteValue > 20) {
      alert("Veuillez entrer une note valide entre 0 et 20.");
      return;
    }

    try {
      await NoteService.createNote(
        etu.id,
        selectedEvaluation.id,
        noteValue
      );

      // Mettre à jour localement
      setEtudiants((prev) =>
        prev.map((e, i) =>
          i === index
            ? { ...e, notes: { ...e.notes, [selectedEvaluation.id]: noteValue } }
            : e
        )
      );

      setEditIndex(null);
    } catch (err) {
      console.error("Erreur lors de la sauvegarde :", err);
    }
  };

  if (loading) return <p>Chargement...</p>;

  return (
    <div>
      <h2>Étudiants inscrits</h2>

      <div className="mb-4">
        <label className="mr-2 font-bold">Type d'évaluation :</label>
        <select
          value={selectedEvaluation?.id || ""}
          onChange={(e) => {
            const evalChoisi = evaluations.find(ev => ev.id === parseInt(e.target.value));
            setSelectedEvaluation(evalChoisi);
            setEditIndex(null);
          }}
          className="border rounded px-2 py-1"
        >
          <option value="" disabled>-- Choisir --</option>
          {evaluations.map((ev) => (
            <option key={ev.id} value={ev.id}>
              {ev.type} ({ev.poids}%)
            </option>
          ))}
        </select>
      </div>

      <table className="w-full border-collapse border">
        <thead>
          <tr className="bg-gray-100">
            <th className="border px-2 py-1">N° Carte</th>
            <th className="border px-2 py-1">Nom</th>
            <th className="border px-2 py-1">Prénom</th>
            <th className="border px-2 py-1">Sexe</th>
            {selectedEvaluation && (
              <th className="border px-2 py-1 text-center">
                {selectedEvaluation.type} ({selectedEvaluation.poids}%)
              </th>
            )}
          </tr>
        </thead>
        <tbody>
          {etudiants.map((etu, index) => (
            <tr key={etu.id} className="even:bg-gray-50">
              <td className="border px-2 py-1 text-center">{etu.num_carte}</td>
              <td className="border px-2 py-1">{etu.nom}</td>
              <td className="border px-2 py-1">{etu.prenom}</td>
              <td className="border px-2 py-1 text-center">{etu.sexe}</td>
              {selectedEvaluation && (
                <td className="border px-2 py-1 text-center cursor-pointer">
                  {editIndex === index ? (
                    <input
                      type="number"
                      min="0"
                      max="20"
                      value={editedData.note}
                      onChange={(e) => setEditedData({ note: e.target.value })}
                      onBlur={() => handleSave(index, etu)}
                      onKeyDown={(e) => {
                        if (e.key === "Enter") handleSave(index, etu);
                      }}
                      autoFocus
                      className="w-16 text-center border rounded"
                    />
                  ) : (
                    <span onClick={() => handleEdit(index, etu)}>
                      {etu.notes[selectedEvaluation.id] ?? "-"}
                    </span>
                  )}
                </td>
              )}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default ListeEtudiantsUE;



import React, { useState, useEffect } from "react";
import EvaluationService from "@/services/evaluationsService";

function EvaluationUE({ ueId }) {
  const [evaluations, setEvaluations] = useState([]);
  const [type, setType] = useState("");
  const [poids, setPoids] = useState("");

  // Récupérer toutes les évaluations
  useEffect(() => {
    EvaluationService.getEvaluationsByUE(ueId).then(res => setEvaluations(res.data));
  }, []);

  const handleCreate = async () => {
    try {
        if (!type || !poids) {
            alert("Veuillez remplir tous les champs.");
            return;
        }
      setType("");
      setPoids("");
      const res = await EvaluationService.createEvaluation(type, parseFloat(poids), ueId);
      setEvaluations(prev => [...prev, res.data]);
    } catch (err) {
      console.error("Erreur création évaluation :", err);
    }
  };

  const handleUpdate = async (id, newType, newPoids) => {
    try {
      const res = await EvaluationService.updateEvaluation(id, { type: newType, poids: newPoids });
      setEvaluations(prev => prev.map(ev => ev.id === id ? res.data : ev));
    } catch (err) {
      console.error("Erreur mise à jour :", err);
    }
  };

  return (
    <div>
      <h2>Gérer les évaluations</h2>

      {/* Formulaire création */}
      <div className="mb-4">
        <select value={type} onChange={e => setType(e.target.value)}>
          <option value="">-- Type --</option>
          <option value="Devoir">Devoir</option>
          <option value="Examen">Examen</option>
          <option value="Projet">Projet</option>
        </select>
        <input 
          type="number" 
          placeholder="Poids (%)" 
          value={poids} 
          min={0}
          max ={100}
          step={10}
          onChange={e => setPoids(e.target.value)} 
          className="ml-2 border px-2"
        />
        <button onClick={handleCreate} className="ml-2 bg-blue-500 text-white px-2 py-1">Créer</button>
      </div>

      {/* Liste des évaluations */}
     {/*  <ul>
        {evaluations.map(ev => (
          <li key={ev.id}>
            {ev.type} - {ev.poids}%
            <button onClick={() => handleUpdate(ev.id, ev.type, ev.poids + 1)} className="ml-2">+1 poids</button>
          </li>
        ))}
      </ul> */}
    </div>
  );
}

export default EvaluationUE;















import { useEffect, useState } from "react";
import NoteService from "@/services/noteService";
import EtudiantService from "@/services/etudiantService";
import { useRouter } from "next/navigation";

function ListeEtudiantsUE({ ueId }) {
  const [etudiants, setEtudiants] = useState([]);
  const [evaluations, setEvaluations] = useState([]);
  const [selectedEvaluation, setSelectedEvaluation] = useState(null);
  const [loading, setLoading] = useState(true);
  const [editIndex, setEditIndex] = useState(null);
  const [editedData, setEditedData] = useState({});
  const router = useRouter();
  

  useEffect(() => {
    const fetchData = async () => {
      if (!ueId) return;
      try {
        const res = await EtudiantService.getNotesByUE(ueId);
        setEtudiants(res.etudiants);
        setEvaluations(res.evaluations);
        if (res.evaluations.length === 0) {
          router.push(`/enseignant/dashboard/cours/mes-ues/${ueId}/evaluations`);
        }
      } catch (err) {
        console.error("Erreur récupération notes :", err);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, [ueId]);

  // Calcul de la moyenne pondérée
  const calculerMoyenne = (etu) => {
    let somme = 0;
    let totalPoids = 0;

    for (const evalObj of evaluations) {
      const note = etu.notes[evalObj.id];
      if (note === undefined || note === null) {
        return "-"; // ⚠️ Si une note manque → pas de moyenne
      }
      somme += note * evalObj.poids;
      totalPoids += evalObj.poids;
    }

    return totalPoids > 0 ? (somme / totalPoids).toFixed(2) : "-";
  };

  const handleEdit = (index, etu) => {
    setEditIndex(index);
    setEditedData({ note: etu.notes[selectedEvaluation.id] ?? "" });
  };

  const handleSave = async (index, etu) => {
    if (!selectedEvaluation) return;
    const noteValue = parseFloat(editedData.note);
    if (isNaN(noteValue) || noteValue < 0 || noteValue > 20) {
      alert("Veuillez entrer une note valide entre 0 et 20.");
      
    }

    try {
      await NoteService.createNote(etu.id, selectedEvaluation.id, noteValue);

      // Mettre à jour localement
      setEtudiants((prev) =>
        prev.map((e, i) =>
          i === index
            ? { ...e, notes: { ...e.notes, [selectedEvaluation.id]: noteValue } }
            : e
        )
      );

      setEditIndex(null);
    } catch (err) {
      console.error("Erreur lors de la sauvegarde :", err);
    }
  };

  if (loading) return <p>Chargement...</p>;

  return (
    <div className="bg-transparent  backdrop-blur-md   px-8 py-10 w-full h-full  animate-fade-in">
      <div className="mb-10 mt-0 flex justify-center font-bold text-2xl"> <h2>Étudiants inscrits</h2></div>

      {/* Sélecteur d'évaluation */}
      <div className="mb-4">
        <label className="mr-2 font-bold">Type d'évaluation :</label>
        <select
          value={selectedEvaluation?.id || ""}
          onChange={(e) => {
            const evalChoisi = evaluations.find(
              (ev) => ev.id === parseInt(e.target.value)
            );
            setSelectedEvaluation(evalChoisi);
            setEditIndex(null);
          }}
          className="border rounded px-2 py-1"
        >
          <option value="" disabled>
            -- Choisir --
          </option>
          {evaluations.map((ev) => (
            <option key={ev.id} value={ev.id}>
              {ev.type} ({ev.poids}%)
            </option>
          ))}
        </select>
        <div> <button onClick={() => router.push(`/enseignant/dashboard/cours/mes-ues/${ueId}/evaluations`)
         }> Modifier Evaluation </button> </div>
      </div>
      
      {/* Tableau */}
      <table className="w-full border-collapse border">
        <thead>
          <tr className="bg-gray-100">
            <th className="border px-2 py-1">N° Carte</th>
            <th className="border px-2 py-1">Nom</th>
            <th className="border px-2 py-1">Prénom</th>
            <th className="border px-2 py-1">Sexe</th>
            {selectedEvaluation && (
              <th className="border px-2 py-1 text-center">
                {selectedEvaluation.type} ({selectedEvaluation.poids}%)
              </th>
            )}
            <th className="border px-2 py-1 text-center">Moyenne</th>
          </tr>
        </thead>
        <tbody>
          {etudiants.map((etu, index) => (
            <tr key={etu.id} className="even:bg-gray-50">
              <td className="border px-2 py-1 text-center">{etu.num_carte}</td>
              <td className="border px-2 py-1">{etu.nom}</td>
              <td className="border px-2 py-1">{etu.prenom}</td>
              <td className="border px-2 py-1 text-center">{etu.sexe}</td>

              {selectedEvaluation && (
                <td className="border px-2 py-1 text-center cursor-pointer">
                  {editIndex === index ? (
                    <input
                      type="number"
                      min="0"
                      max="20"
                      value={editedData.note}
                      onChange={(e) =>
                        setEditedData({ note: e.target.value })
                      }
                      onBlur={() => handleSave(index, etu)}
                      onKeyDown={(e) => {
                        if (e.key === "Enter") handleSave(index, etu);
                      }}
                      autoFocus
                      className="w-16 text-center border rounded"
                    />
                  ) : (
                    <span onClick={() => handleEdit(index, etu)}>
                      {etu.notes[selectedEvaluation.id] ?? "-"}
                    </span>
                  )}
                </td>
              )}

              {/* ✅ Colonne moyenne */}
              <td className="border px-2 py-1 text-center font-bold">
                {calculerMoyenne(etu)}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default ListeEtudiantsUE;
