"use client";
import { useState } from "react";

// Donn√©es simul√©es
const fakeProfesseurs = [
  { id: 1, nom: "Kossi", prenom: "Jean", titre: "Docteur", ues: ["Maths", "Physique"] },
  { id: 2, nom: "Adjo", prenom: "Marie", titre: "Professeur", ues: ["Informatique"] },
  { id: 3, nom: "Tchalla", prenom: "Koffi", titre: "Assistant", ues: [] },
];

// Liste des UEs disponibles (tu remplaceras par ton API)
const allUEs = ["Maths", "Physique", "Informatique", "Chimie", "Biologie"];

export default function AffectationUE() {
  const [professeurs, setProfesseurs] = useState(fakeProfesseurs);
  const [selectedProf, setSelectedProf] = useState(null);
  const [showUESelector, setShowUESelector] = useState(false);
  const [selectedUEs, setSelectedUEs] = useState([]);

  const handleSelectProf = (prof) => {
    setSelectedProf(prof);
    setShowUESelector(false);
    setSelectedUEs([]);
  };

  const handleToggleUE = (ue) => {
    if (selectedUEs.includes(ue)) {
      setSelectedUEs(selectedUEs.filter((item) => item !== ue));
    } else {
      setSelectedUEs([...selectedUEs, ue]);
    }
  };

  const handleAddUE = () => {
    setShowUESelector(true);
  };

  const handleValidate = () => {
    if (selectedProf && selectedUEs.length > 0) {
      setProfesseurs((prev) =>
        prev.map((p) =>
          p.id === selectedProf.id
            ? { ...p, ues: [...p.ues, ...selectedUEs] }
            : p
        )
      );
      setSelectedProf((prev) => ({
        ...prev,
        ues: [...prev.ues, ...selectedUEs],
      }));
      setSelectedUEs([]);
      setShowUESelector(false);
    }
  };

  return (
    <div className="p-6">
      <h2 className="text-xl font-bold mb-6">Affectation des UEs aux professeurs</h2>

      <div className="grid grid-cols-2 gap-6">
        {/* Colonne gauche : liste des professeurs */}
        <div>
          <h3 className="font-semibold mb-2">Liste des professeurs</h3>
          <table className="w-full border-collapse border border-gray-300">
            <thead>
              <tr className="bg-gray-200">
                <th className="border p-2">Nom</th>
                <th className="border p-2">Pr√©nom</th>
                <th className="border p-2">Titre</th>
              </tr>
            </thead>
            <tbody>
              {professeurs.map((prof) => (
                <tr
                  key={prof.id}
                  className={`cursor-pointer hover:bg-gray-100 ${
                    selectedProf?.id === prof.id ? "bg-blue-100" : ""
                  }`}
                  onClick={() => handleSelectProf(prof)}
                >
                  <td className="border p-2">{prof.nom}</td>
                  <td className="border p-2">{prof.prenom}</td>
                  <td className="border p-2">{prof.titre}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {/* Colonne droite : d√©tails du prof s√©lectionn√© */}
        <div>
          {selectedProf ? (
            <div>
              <h3 className="text-lg font-semibold mb-4">
                UEs de {selectedProf.titre} {selectedProf.nom} {selectedProf.prenom}
              </h3>
              <button
                onClick={handleAddUE}
                className="bg-blue-600 text-white px-4 py-2 rounded mb-4"
              >
                ‚ûï Affecter une UE
              </button>

              {/* Liste des UEs d√©j√† affect√©es */}
              {selectedProf.ues.length > 0 ? (
                <ul className="list-disc ml-6 mb-4">
                  {selectedProf.ues.map((ue, index) => (
                    <li key={index}>{ue}</li>
                  ))}
                </ul>
              ) : (
                <p className="text-gray-500 mb-4">Aucune UE affect√©e.</p>
              )}

              {/* S√©lecteur d‚ÄôUEs */}
              {showUESelector && (
                <div className="p-4 border rounded bg-gray-50">
                  <h4 className="font-medium mb-2">S√©lectionnez les UEs √† affecter :</h4>
                  <table className="w-full border-collapse border border-gray-300 mb-4">
                    <thead>
                      <tr className="bg-gray-200">
                        <th className="border p-2">Choisir</th>
                        <th className="border p-2">Nom de l‚ÄôUE</th>
                      </tr>
                    </thead>
                    <tbody>
                      {allUEs.map((ue) => (
                        <tr key={ue}>
                          <td className="border p-2 text-center">
                            <input
                              type="checkbox"
                              checked={selectedUEs.includes(ue)}
                              onChange={() => handleToggleUE(ue)}
                            />
                          </td>
                          <td className="border p-2">{ue}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>

                  <button
                    onClick={handleValidate}
                    className="bg-green-600 text-white px-4 py-2 rounded"
                  >
                    ‚úÖ Valider
                  </button>
                </div>
              )}
            </div>
          ) : (
            <p className="text-gray-500">S√©lectionnez un professeur √† gauche.</p>
          )}
        </div>
      </div>
    </div>
  );
}





"use client";

import { useState, useEffect } from "react";
import UEService from "@/services/ueService";

export default function GestionUEs() {
  const [ues, setUes] = useState([]);
  const [loading, setLoading] = useState(true);
  const [editingUE, setEditingUE] = useState(null);
  const [newUEData, setNewUEData] = useState({ code: "", libelle: "" });

  // Charger les UEs
  useEffect(() => {
    fetchUEs();
  }, []);

  const fetchUEs = async () => {
    try {
      setLoading(true);
      const data = await UEService.getAllUE();
      setUes(data);
    } catch (error) {
      console.error("Erreur lors du chargement des UEs :", error);
    } finally {
      setLoading(false);
    }
  };

  // Ajouter une nouvelle UE
  const handleAddUE = async () => {
    const code = prompt("Code de la nouvelle UE :");
    const libelle = prompt("Libell√© de la nouvelle UE :");
    if (!code || !libelle) return;

    try {
      const createdUE = await UEService.creerUE({ code, libelle });
      setUes((prev) => [...prev, createdUE]);
    } catch (error) {
      console.error("Erreur lors de la cr√©ation :", error);
    }
  };

  // √âditer une UE
  const handleEditUE = (ue) => {
    setEditingUE(ue);
    setNewUEData({ code: ue.code, libelle: ue.libelle });
  };

  // Valider la modification
  const handleUpdateUE = async () => {
    if (!newUEData.code.trim() || !newUEData.libelle.trim()) return;
    try {
      await UEService.updateUE(editingUE.id, newUEData);
      setUes((prev) =>
        prev.map((ue) =>
          ue.id === editingUE.id ? { ...ue, ...newUEData } : ue
        )
      );
      setEditingUE(null);
      setNewUEData({ code: "", libelle: "" });
    } catch (error) {
      console.error("Erreur lors de la modification :", error);
    }
  };

  // Supprimer une UE
  const handleDeleteUE = async (ue) => {
    if (!confirm(`Supprimer l'UE "${ue.libelle}" ?`)) return;
    try {
      await UEService.deleteUE(ue.id);
      setUes((prev) => prev.filter((u) => u.id !== ue.id));
    } catch (error) {
      console.error("Erreur lors de la suppression :", error);
    }
  };

  if (loading) return <p>Chargement des UEs...</p>;

  return (
    <div className="p-6">
      <h2 className="text-xl font-bold mb-4">Gestion des UEs</h2>

      <button
        onClick={handleAddUE}
        className="bg-blue-600 text-white px-4 py-2 rounded mb-4"
      >
        ‚ûï Ajouter une UE
      </button>

      <table className="w-full border-collapse border border-gray-300">
        <thead>
          <tr className="bg-gray-200">
            <th className="border p-2">Code</th>
            <th className="border p-2">Libell√©</th>
            <th className="border p-2">Actions</th>
          </tr>
        </thead>
        <tbody>
          {ues.map((ue) => (
            <tr key={ue.id} className="hover:bg-gray-100">
              <td className="border p-2">
                {editingUE?.id === ue.id ? (
                  <input
                    value={newUEData.code}
                    onChange={(e) =>
                      setNewUEData((prev) => ({ ...prev, code: e.target.value }))
                    }
                    className="border p-1 rounded w-full"
                  />
                ) : (
                  ue.code
                )}
              </td>
              <td className="border p-2">
                {editingUE?.id === ue.id ? (
                  <input
                    value={newUEData.libelle}
                    onChange={(e) =>
                      setNewUEData((prev) => ({ ...prev, libelle: e.target.value }))
                    }
                    className="border p-1 rounded w-full"
                  />
                ) : (
                  ue.libelle
                )}
              </td>
              <td className="border p-2 flex gap-2">
                {editingUE?.id === ue.id ? (
                  <>
                    <button
                      onClick={handleUpdateUE}
                      className="bg-green-600 text-white px-2 py-1 rounded"
                    >
                      üíæ
                    </button>
                    <button
                      onClick={() => setEditingUE(null)}
                      className="bg-gray-400 text-white px-2 py-1 rounded"
                    >
                      ‚ùå
                    </button>
                  </>
                ) : (
                  <>
                    <button
                      onClick={() => handleEditUE(ue)}
                      className="bg-yellow-500 text-white px-2 py-1 rounded"
                    >
                      ‚úèÔ∏è
                    </button>
                    <button
                      onClick={() => handleDeleteUE(ue)}
                      className="bg-red-600 text-white px-2 py-1 rounded"
                    >
                      üóëÔ∏è
                    </button>
                  </>
                )}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}
